#
# credits: https://gitlab.com/tkpapp/GitlabJuliaDemo.jl
#


image: julia:latest       # image comes from Docker hub

stages:
  - linter
  - test
  - deploy

before_script:
  # workaround for https://github.com/JuliaDocs/Documenter.jl/issues/686
  - apt-get -qq update; apt-get -y install git
  - julia --project=@. -e "import Pkg; Pkg.build()"

format:
  stage: linter
  script:
    - "[[ -d .julia ]] && mv .julia /tmp"
    - julia --project=.formatting -e 'import Pkg; Pkg.add("JuliaFormatter")'
    - julia --project=.formatting .formatting/format_all.jl
    - "[[ -d /tmp/.julia ]] && mv /tmp/.julia ."
  variables:
    CI_JULIA_VERSION: "1.7"
    JULIA_DEPOT_PATH: /tmp/.julia
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'dev'
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'main'

unittest:
  stage: test
  script:
    - julia --project=@. -e "import Pkg; Pkg.test(; coverage = false)"
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'dev'
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'main'

coverage:
  stage: test
  script:
    - julia --project=@. -e "import Pkg; Pkg.test(; coverage = true)"
    - julia --project=test/coverage -e 'import Pkg; Pkg.instantiate()'
    - julia --project=test/coverage test/coverage/coverage-summary.jl
  only:
    - main

pages:
  stage: deploy
  script:
    - julia --project=docs -e 'using Pkg; Pkg.instantiate(); Pkg.develop(PackageSpec(path=pwd()))'
    - julia --project=docs --color=yes docs/make.jl
    - mv docs/build public # move to the directory picked up by Gitlab pages
  artifacts:
    paths:
      - public
  only:
  - main
